% PUT HELP INFORMATION
function summarize_behavioral_data( study_dt, test_dt, id, out_dir )

%% Study RT
% Study RT data is analyzed in two ways: 
% 1) Trial Type (AB, AC, DE) X Encoding Task
% 2) Trial Type (AB, AC, DE) X AB Memory (Hit, Miss) X AC Memory (Hit, Miss)
%   Note that DE only has hits (HH) and source incorrects (MM) and misses
% (only for item hits)

% Get trial type vectors
ab = ismember( study_dt.trial_type, 'ab' );
ac = ismember( study_dt.trial_type, 'ac' );
de = ismember( study_dt.trial_type, 'de' );

% Get Bad Study trial vectors
study_bad = study_dt.bad_trial_total;

% Get Tasks
s_art = ismember( study_dt.cur_task, 'artist' );
s_fun = ismember( study_dt.cur_task, 'function' );
s_pls = ismember( study_dt.cur_task, 'pleasant' );
s_vac = ismember( study_dt.cur_task, 'vacation' );

% Get study RTs
study_rt = study_dt.study_rt;

% ANALYSIS 1
% Create matrix, put de in row 1, ab in row 2, and ac in row 3
study_rt_a1(1,:) = [ ...
    median( study_rt( s_art & de & ~study_bad ) ), ...
    median( study_rt( s_fun & de & ~study_bad ) ), ...
    median( study_rt( s_pls & de & ~study_bad ) ), ...
    median( study_rt( s_vac & de & ~study_bad ) ) ...
    ];
study_rt_a1(2,:) = [ ...
    median( study_rt( s_art & ab & ~study_bad ) ), ...
    median( study_rt( s_fun & ab & ~study_bad ) ), ...
    median( study_rt( s_pls & ab & ~study_bad ) ), ...
    median( study_rt( s_vac & ab & ~study_bad ) ) ...
    ];
study_rt_a1(3,:) = [ ...
    median( study_rt( s_art & ac & ~study_bad ) ), ...
    median( study_rt( s_fun & ac & ~study_bad ) ), ...
    median( study_rt( s_pls & ac & ~study_bad ) ), ...
    median( study_rt( s_vac & ac & ~study_bad ) ) ...
    ];
% Make table for saving later
% study_rt_task = array2table( study_rt_a1(:), 'VariableNames', {'study_rt'} );
% study_rt_task.trial_type = repmat({'de'; 'ab'; 'ac'}, length(study_rt_a1(:)) / 3, 1);
% study_rt_task.task       = [repmat({'artist'},3,1); repmat({'function'},3,1); repmat({'pleasant'},3,1); repmat({'vacation'},3,1)]

% ANALYSIS2: Trial Type (AB, AC) X AB Memory (Hit, Miss) X AC Memory (Hit, Miss)
% Get memory bins for study
hh    = ismember( study_dt.memory_bin, {'HH2'} );
hm    = ismember( study_dt.memory_bin, {'HM1' 'HM2'} );
mh    = ismember( study_dt.memory_bin, {'MH1' 'MH2'} );
mm    = ismember( study_dt.memory_bin, {'MM0' 'MM1' 'MM2' } );
miss2 = ismember( study_dt.memory_bin, {'MISS2'} );
h     = ismember( study_dt.memory_bin, {'H1'} );
m     = ismember( study_dt.memory_bin, {'M1' 'M0'} );
miss1 = ismember( study_dt.memory_bin, {'MISS1'} );

% Create matrix, put de in row 1, ab in row 2, and ac in row 3
study_rt_a2(1,:) = [ ...
    median( study_rt( de & h & ~study_bad ) ), ...
    NaN, ...
    NaN, ...
    median( study_rt( de & m & ~study_bad ) ), ...
    median( study_rt( de & miss1 & ~study_bad ) ) ...
    ];
study_rt_a2(2,:) = [ ...
    median( study_rt( ab & hh & ~study_bad ) ), ...
    median( study_rt( ab & hm & ~study_bad ) ), ...
    median( study_rt( ab & mh & ~study_bad ) ), ...
    median( study_rt( ab & mm & ~study_bad ) ), ...
    median( study_rt( ab & miss2 & ~study_bad ) ) ...
    ];
study_rt_a2(3,:) = [ ...
    median( study_rt( ac & hh & ~study_bad ) ), ...
    median( study_rt( ac & hm & ~study_bad ) ), ...
    median( study_rt( ac & mh & ~study_bad ) ), ...
    median( study_rt( ac & mm & ~study_bad ) ), ...
    median( study_rt( ac & miss2 & ~study_bad ) ) ...
    ];

%% Bin Counts
% Here, I get the number of trials in my test bin. This is similar to the
% RT analysis in terms of how it is structure. 
% There are 5 columns: HH, HM, MH, MM, Item Miss
study_bin_counts(1,:) = [ ...
    sum( de & h & ~study_bad ), ...
    NaN, ...
    NaN, ...
    sum( de & m & ~study_bad ), ...
    sum( de & miss1 & ~study_bad ), ...
    sum( de & study_bad) ...
    ];
study_bin_counts(2,:) = [ ...
    sum( ab & hh & ~study_bad ), ...
    sum( ab & hm & ~study_bad ), ...
    sum( ab & mh & ~study_bad ), ...
    sum( ab & mm & ~study_bad ), ...
    sum( ab & miss2 & ~study_bad ), ...
    sum( ab & study_bad) ...
    ];
study_bin_counts(3,:) = [ ...
    sum( ac & hh & ~study_bad ), ...
    sum( ac & hm & ~study_bad ), ...
    sum( ac & mh & ~study_bad ), ...
    sum( ac & mm & ~study_bad ), ...
    sum( ac & miss2 & ~study_bad ), ...
    sum( ac & study_bad) ...
    ];

% Now do bad trial analysis ( 3 columns )
% study_bad_counts(1,:) = [ ...
%      sum( de & study_dt.study_bad_multi_resp ), ...
%      sum( de & study_dt.study_bad_nr ), ...
%      sum( de & study_dt.study_bad_too_quick), ...
%      sum( de & study_dt.test_bad_trial ), ...
%      ];
% study_bad_counts(2,:) = [ ...
%      sum( ab & study_dt.study_bad_multi_resp ), ...
%      sum( ab & study_dt.study_bad_nr), ...
%      sum( ab & study_dt.study_bad_too_quick), ...
%      sum( ab & study_dt.test_bad_trial ), ...
%      ];
% study_bad_counts(3,:) = [ ...
%      sum( ac & study_dt.study_bad_multi_resp ), ...
%      sum( ac & study_dt.study_bad_nr), ...
%      sum( ac & study_dt.study_bad_too_quick), ...
%      sum( ac & study_dt.test_bad_trial ), ...
%      ];
%  
% % Update study_bin_counts
% study_bin_counts = horzcat( study_bin_counts, study_bad_counts );

%% Memory Performance from test_dt
% Get trial type vectors
abac = ismember( test_dt.item_type, 'abac' );
de = ismember( test_dt.item_type, 'de' );
new = ismember( test_dt.item_type, 'new' );

% Tasks
t1_art = ismember( test_dt.task1, 'artist'   );
t1_fun = ismember( test_dt.task1, 'function' );
t1_pls = ismember( test_dt.task1, 'pleasant' );
t1_vac = ismember( test_dt.task1, 'vacation' );
t2_art = ismember( test_dt.task2, 'artist'   );
t2_fun = ismember( test_dt.task2, 'function' );
t2_pls = ismember( test_dt.task2, 'pleasant' );
t2_vac = ismember( test_dt.task2, 'vacation' );

% Get old responses
old_resp = ismember( test_dt.on_resp, {'old'} );

% Get memory bins into a different form (for doing math)
hh    = ismember( test_dt.memory_bin, {'HH2'} );
hm    = ismember( test_dt.memory_bin, {'HM1' 'HM2'} );
mh    = ismember( test_dt.memory_bin, {'MH1' 'MH2'} );
mm    = ismember( test_dt.memory_bin, {'MM0' 'MM1' 'MM2'} );
miss2 = ismember( test_dt.memory_bin, {'MISS2'} );
h     = ismember( test_dt.memory_bin, {'H1'} );
m     = ismember( test_dt.memory_bin, {'M2' 'M1' 'M0'} );
miss1 = ismember( test_dt.memory_bin, {'MISS1'} );
fa    = ismember( test_dt.memory_bin, {'FA1' 'FA2'} );
cr    = ismember( test_dt.memory_bin, {'CR'} );

% Get source accuracy vectors
task1_acc = test_dt.task1_acc == 1;
task2_acc = test_dt.task2_acc == 1;

% Get bad trials
test_bad     = test_dt.bad_trial_total;

% Source Hit
ab_source_hit = abac & task1_acc & ~test_bad;
ac_source_hit = abac & task2_acc & ~test_bad;
de_source_hit = de & task1_acc & ~test_bad;
new_source_sel = new & (test_dt.n_sources_sel > 0) & ~test_bad;


% Analysis 1 -- Item and Source Memory
% Counts of old responses by item type
test_mem(:,1) = [ ...
    sum( abac & old_resp & ~test_bad ); ...
    sum( abac & old_resp & ~test_bad ); ...
    sum( de & old_resp & ~test_bad); ...
    sum( new & old_resp & ~test_bad ); ...
    ];

% Proportion of old responses by item type
n_trials = [ ...
    sum( abac & ~test_bad ); ....
    sum( abac & ~test_bad ); ...
    sum( de & ~test_bad ); ...
    sum( new & ~test_bad ); ...
    ];
test_mem(:,2) = test_mem(:,1) ./ n_trials;

% Hits - False Alarms by item type
test_mem(:,3) = test_mem(:,2) - test_mem(4,2);
test_mem(4,3) = NaN;

% Counts of source selection (1 or 2) by item type
test_mem(:,4) = [ ...
    sum( ab_source_hit ); ...
    sum( ac_source_hit ); ...
    sum( de_source_hit ); ...
    sum( new_source_sel ); ...
    ];

% Proportion of source hits / FA
test_mem(:,5) = test_mem(:,4) ./ test_mem(:,1);


% Analysis 2 -- Source Memory X Task
% Rows are AB, AC and DE
% Columns are artist, function, pleasant, vacation
n_source_correct = [ ...
    sum( abac & t1_art & task1_acc & ~test_bad ), sum( abac & t1_fun & task1_acc & ~test_bad ), sum( abac & t1_pls & task1_acc & ~test_bad ), sum( abac & t1_vac & task1_acc & ~test_bad ); ...
    sum( abac & t2_art & task2_acc & ~test_bad ), sum( abac & t2_fun & task2_acc & ~test_bad ), sum( abac & t2_pls & task2_acc & ~test_bad ), sum( abac & t2_vac & task2_acc & ~test_bad ); ...
    sum( de & t1_art & task1_acc & ~test_bad ), sum( de & t1_fun & task1_acc & ~test_bad ), sum( de & t1_pls & task1_acc & ~test_bad ), sum( de & t1_vac & task1_acc & ~test_bad ); ...
    ];
n_old_by_task = [ ...
    sum( abac & t1_art & old_resp & ~test_bad ), sum( abac & t1_fun & old_resp & ~test_bad ), sum( abac & t1_pls & old_resp & ~test_bad ), sum( abac & t1_vac & old_resp & ~test_bad ); ...
    sum( abac & t2_art & old_resp & ~test_bad ), sum( abac & t2_fun & old_resp & ~test_bad ), sum( abac & t2_pls & old_resp & ~test_bad ), sum( abac & t2_vac & old_resp & ~test_bad ); ...
    sum( de & t1_art & old_resp & ~test_bad ), sum( de & t1_fun & old_resp & ~test_bad ), sum( de & t1_pls & old_resp & ~test_bad ), sum( de & t1_vac & old_resp & ~test_bad ); ...
    ];
test_source_cor_by_task = n_source_correct ./ n_old_by_task;

% Analysis 3 -- Conditional Source Memory

%ABAC Grid and Conditional
abac_hh = sum( abac & hh & ~test_bad );
abac_hm = sum( abac & hm & ~test_bad );
abac_mh = sum( abac & mh & ~test_bad );
abac_mm = sum( abac & mm & ~test_bad );

% Compute conditional
ab_acc_ac_hit  = abac_hh / ( abac_hh + abac_mh ); % p(AB Hit|AC Hit)
ab_acc_ac_miss = abac_hm / ( abac_hm + abac_mm ); % p(AB Hit|AC Miss)
ac_acc_ab_hit  = abac_hh / ( abac_hh + abac_hm ); % p(AC Hit|AB Hit)
ac_acc_ab_miss = abac_mh / ( abac_mh + abac_mm ); % p(AC Hit|AB Miss)

% Get into table format
source_mem = [ ...
    ab_acc_ac_hit,  ab_acc_ac_miss, ...
    ac_acc_ab_hit, ac_acc_ab_miss, ...
    ];


%% Make table of output
f = figure('Visible','on','Units','Normalized','Color','white','Position',[.4 .1 .25 .7]);

% Add text for participant
uicontrol('Parent',f,'Style','text','String',id, ...
        'Units','Normalized','Position',[.25 .94 .5 .02], 'BackgroundColor','white', ...
        'FontWeight','bold');

% Make a table for study_a1
table1 = num2cell(study_rt_a1);
rownames = {'de' 'ab' 'ac'}; 
colnames1 = {'artist' 'function' 'pleasant' 'vacation'};
uitable('Parent',f,'Data',table1,'Rowname',rownames,'Units','Normalized', ...
        'Position',[.11 .8 .78 .10],'ColumnName',colnames1,'ColumnWidth',{80 80 80 80}, ...
        'FontSize',8,'RowStriping','on');
uicontrol('Parent',f,'Style','text','String','RT (secs): Trial Type X Task', ...
        'Units','Normalized','Position',[.25 .91 .5 .02], 'BackgroundColor','white', ...
        'FontWeight','bold');
    
% Make a table for study_a2
table2 = num2cell(study_rt_a2);
rownames = {'de' 'ab' 'ac'}; 
colnames2 = {'HH' 'HM' 'MH' 'MM' 'Item Miss'};
uitable('Parent',f,'Data',table2,'Rowname',rownames,'Units','Normalized', ...
        'Position',[.11 .65 .78 .10],'ColumnName',colnames2,'ColumnWidth',{60 60 60 60 80}, ...
        'FontSize',8,'RowStriping','on');
uicontrol('Parent',f,'Style','text','String','RT (secs): Trial Type X Memory', ...
        'Units','Normalized','Position',[.25 .76 .5 .02], 'BackgroundColor','white', ...
        'FontWeight','bold');

% Make a table for study_bin_count
table3 = num2cell(study_bin_counts);
rownames = {'de' 'abac'}; 
colnames2 = {'HH' 'HM' 'MH' 'MM' 'Item Miss' 'Bad Trial'};
uitable('Parent',f,'Data',table3,'Rowname',rownames,'Units','Normalized', ...
        'Position',[.11 .5 .78 .10],'ColumnName',colnames2,'ColumnWidth',{30 30 30 30 65 65}, ...
        'FontSize',8,'RowStriping','on');
uicontrol('Parent',f,'Style','text','String','Memory Bin Counts', ...
        'Units','Normalized','Position',[.25 .61 .5 .02], 'BackgroundColor','white', ...
        'FontWeight','bold');

% Make a table for item and source memory
table4 = num2cell(test_mem);
rownames = {'ab' 'ac' 'de' 'new'};
colnames2 = {'#old' 'p(old)' 'H-FA' '#source' 'p(source)'};
uitable('Parent',f,'Data',table4,'Rowname',rownames,'Units','Normalized', ...
        'Position',[.11 .32 .78 .13],'ColumnName',colnames2,'ColumnWidth',{65 65 65 65 65}, ...
        'FontSize',8,'RowStriping','on');
uicontrol('Parent',f,'Style','text','String','Item and Source Memory', ...
        'Units','Normalized','Position',[.25 .46 .5 .02], 'BackgroundColor','white', ...
        'FontWeight','bold');

% Make a table for source memory by task
table5 = num2cell(test_source_cor_by_task);
rownames = {'AB' 'AC' 'DE'};
colnames2 = {'Artist' 'Function' 'Pleasant' 'Vacation'};
uitable('Parent',f,'Data',table5,'Rowname',rownames,'Units','Normalized', ...
        'Position',[.11 .18 .78 .10],'ColumnName',colnames2,'ColumnWidth',{75 75 75 75}, ...
        'FontSize',8,'RowStriping','on');
uicontrol('Parent',f,'Style','text','String','Source Memory X Task', ...
        'Units','Normalized','Position',[.25 .29 .5 .02], 'BackgroundColor','white', ...
        'FontWeight','bold');
        
% Make a table for conditional source memory
table6 = num2cell(source_mem);
rownames = {'Accuracy'};
colnames2 = {'p(AB/ACh)' 'p(AB/ACm)' 'p(AC/ABh)' 'p(AC/ABm)'};
uitable('Parent',f,'Data',table6,'Rowname',rownames,'Units','Normalized', ...
        'Position',[.11 .04 .78 .08],'ColumnName',colnames2,'ColumnWidth',{75 75 75 75}, ...
        'FontSize',8,'RowStriping','on');
uicontrol('Parent',f,'Style','text','String','Conditional Source Memory', ...
        'Units','Normalized','Position',[.25 .14 .5 .02], 'BackgroundColor','white', ...
        'FontWeight','bold');

% Write table to file
saveas(f,fullfile(out_dir,'behavioral_summary.png'));

% Wait for table to close
waitfor(f);

end
